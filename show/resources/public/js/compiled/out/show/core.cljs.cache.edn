{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name show.core, :imports nil, :requires {reagent reagent.core, views show.slides.views, show.slides.slides show.slides.slides, reagent.core reagent.core, re-frisk re-frisk.core, slides show.slides.slides, re-frisk.core re-frisk.core, s cljs.spec, show.slides.views show.slides.views, cljs.spec cljs.spec, re-frame re-frame.core, re-frame.core re-frame.core}, :uses nil, :defs {slides {:name show.core/slides, :file "src/show/core.cljs", :line 10, :column 1, :end-line 10, :end-column 16, :declared true, :meta {:file "/home/yosh/git/presentation/presentation-tampleate/show/src/show/core.cljs", :line 10, :column 10, :end-line 10, :end-column 16, :declared true}}, initial-state {:name show.core/initial-state, :file "src/show/core.cljs", :line 12, :column 1, :end-line 12, :end-column 19, :meta {:file "/home/yosh/git/presentation/presentation-tampleate/show/src/show/core.cljs", :line 12, :column 6, :end-line 12, :end-column 19}}, log-to-re-frisk {:name show.core/log-to-re-frisk, :file "src/show/core.cljs", :line 26, :column 1, :end-line 26, :end-column 21, :meta {:file "/home/yosh/git/presentation/presentation-tampleate/show/src/show/core.cljs", :line 26, :column 6, :end-line 26, :end-column 21}}, check-int-spec {:protocol-inline nil, :meta {:file "/home/yosh/git/presentation/presentation-tampleate/show/src/show/core.cljs", :line 42, :column 7, :end-line 42, :end-column 21, :arglists (quote ([val]))}, :name show.core/check-int-spec, :variadic false, :file "src/show/core.cljs", :end-column 21, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val]))}, check-slide-specs {:name show.core/check-slide-specs, :file "src/show/core.cljs", :line 49, :column 1, :end-line 49, :end-column 23, :meta {:file "/home/yosh/git/presentation/presentation-tampleate/show/src/show/core.cljs", :line 49, :column 6, :end-line 49, :end-column 23}}, slideshow {:protocol-inline nil, :meta {:file "/home/yosh/git/presentation/presentation-tampleate/show/src/show/core.cljs", :line 91, :column 7, :end-line 91, :end-column 16, :arglists (quote ([]))}, :name show.core/slideshow, :variadic false, :file "src/show/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, mount-root {:protocol-inline nil, :meta {:file "/home/yosh/git/presentation/presentation-tampleate/show/src/show/core.cljs", :line 97, :column 7, :end-line 97, :end-column 17, :arglists (quote ([]))}, :name show.core/mount-root, :variadic false, :file "src/show/core.cljs", :end-column 17, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, on-jsload {:protocol-inline nil, :meta {:file "/home/yosh/git/presentation/presentation-tampleate/show/src/show/core.cljs", :line 102, :column 7, :end-line 102, :end-column 16, :arglists (quote ([]))}, :name show.core/on-jsload, :variadic false, :file "src/show/core.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, run {:protocol-inline nil, :meta {:file "/home/yosh/git/presentation/presentation-tampleate/show/src/show/core.cljs", :line 105, :column 16, :end-line 105, :end-column 19, :export true, :arglists (quote ([]))}, :name show.core/run, :variadic false, :file "src/show/core.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :export true, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {reagent reagent.core, reagent.core reagent.core, s cljs.spec, cljs.spec cljs.spec}, :cljs.analyzer/constants {:seen #{:y :div.slide :slideshow/initialize :slideshow/prev-slide :db :queue :_ cljs.core/int? :slideshow/next-slide :check-slides-specs :event-log :slideshow/broken-slide :event :after :id :div.slideshow-half-width :coeffects :x :spec/success :log-to-re-frisk :before :slideshow/current-slide :message}, :order [:slideshow/current-slide :slideshow/broken-slide :slideshow/initialize :db :id :log-to-re-frisk :before :event-log :coeffects :event :after cljs.core/int? :check-slides-specs :spec/success :message :queue :slideshow/next-slide :slideshow/prev-slide :_ :div.slideshow-half-width :div.slide :x :y]}, :doc nil}